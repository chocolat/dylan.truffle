(root source.dylan
    (zone comment.block.dylan
        (start
            (regex [(?<=^|\s|\()/\*]))
        (end
            (regex \*/))
        (subzones
            (include @comment-block)))
    (zone comment.line.double-slash.dylan
        (match
            (regex \s*//.*$\n?)))
    (zone keyword.control.preprocessor.dylan
        (start
            (regex [^(module|synopsis|author|copyright|version|files|executable|library):]))
        (end
            (regex ^\s*$))
        (subzones
            (zone keyword.control.preprocessor.dylan
                (match
                    (regex [^(module|synopsis|author|copyright|version|files|executable|library):])))))
    (zone meta.function.dylan
        (match
            (regex [^(define)\s+((?:(?:sealed|open|inline[-a-z]*)\s+)+)?(?:(domain)|(method|function|generic)\s+)([\\_A-Za-z0-9/!?*%$\-\<\>=]*)]
                (3 storage.modifier.dylan)
                (4 storage.type.function.dylan)
                (5 entity.name.function.dylan)
                (1 keyword.other.dylan)
                (2 storage.modifier.dylan))))
    (zone meta.class.dylan
        (match
            (regex [^(define)\s+((?:(?:sealed|open|abstract|concrete|primary|free)\s+)+)?(class)\s+([_A-Za-z0-9/!?*%$\-\<\>]*)]
                (3 storage.type.class.dylan)
                (4 entity.name.type.dylan)
                (1 keyword.other.dylan)
                (2 storage.modifier.dylan))))
    (zone meta.namespace.dylan
        (match
            (regex [^(define)\s+((library|module)\s+[_A-Za-z0-9/!?*%$\-\<\>]+)]
                (3 storage.type.namespace.dylan)
                (1 keyword.other.dylan)
                (2 entity.name.other.dylan))))
    (zone meta.variable.dylan
        (match
            (regex [^(define)\s+(constant|variable)\s+([_A-Za-z0-9/!?*%$\-\<\>]+)]
                (3 entity.name.other.dylan)
                (1 keyword.other.dylan)
                (2 storage.type.dylan))))
    (zone meta.macro.dylan
        (match
            (regex [^(define)\s+(macro)\s+([_A-Za-z0-9/!?*%$\-\<\>]+)]
                (3 entity.name.other.dylan)
                (1 keyword.other.dylan)
                (2 storage.type.dylan))))
    (zone meta.definition.dylan
        (match
            (regex [^(define)\s+([_A-Za-z0-9/!?*%$\-\<\>\s]+)]
                (1 keyword.other.dylan)
                (2 entity.name.other.dylan))))
    (zone constant.language.dylan
        (match
            (list [#t] [#f] [#next] [#rest] [#key] [#all-keys] [#include])))
    (zone constant.numeric.dylan
        (match
            (regex [\b((#x[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)\b])))
    (zone constant.character.dylan
        (match
            (regex ['(\\<[0-9a-fA-F]*>|\\.|.)'])))
    (zone string.quoted.double.dylan
        (start ")
        (end ")
        (subzones
            (include @escape)))
    (zone string.quoted.other.dylan
        (start
            (regex [(#)"]
                (1 keyword.operator.dylan)))
        (end ")
        (subzones
            (include @escape)))
    (zone keyword.control.dylan
        (match
            (regex [(?<=^|[,.()\s])(above|afterwards|begin|below|block|by|case|cleanup|else|elseif|exception|finally|for|from|keyed-by|if|in|otherwise|select|then|to|unless|until:?|using|when|while:?)(?=$|[;,()\s])])))
    (zone keyword.control.dylan
        (match
            (regex [(?<=^|[,;\s])end(?=$|[;,)\s])])))
    (zone keyword.other.dylan
        (match
            (regex [(?<=^|[,.(\s])(class|constant|create|default:|define|each-subclass|exclude:|export|export:|function|generic|import:|inherited|init-function:|init-keyword:|init-value:|instance|keyword|let(\s+handler)?|library|local|macro|method|module|prefix:|rename:|required|required-init-keyword:|sealed|setter:|slot|type:|use|variable|virtual)(?=$|[;,.()\s])])))
    (zone support.class.dylan
        (match
            (regex [<(abort|array|boolean|byte-string|character|class|collection|complex|condition|deque|double-float|empty-list|error|explicit-key-collection|extended-float|float|function|generic-function|integer|list|method|mutable-collection|mutable-explicit-key-collection|mutable-sequence|number|object-table|object|pair|range|rational|real|restart|sealed-object-error|sequence|serious-condition|simple-error|simple-object-vector|simple-restart|simple-vector|simple-warning|single-float|singleton|stretchy-collection|stretchy-vector|string|symbol|table|type-error|type|unicode-string|vector|warning)>])))
    (zone support.function.dylan
        (match
            (regex [(?<=^|[~,.(\[\s])(abort|abs|add|add!|add-method|add-new|add-new!|all-superclasses|always|any\?|applicable-method\?|apply|aref|aref-setter|as|as-lowercase|as-lowercase!|as-uppercase|as-uppercase!|ash|backward-iteration-protocol|break|ceiling|ceiling/|cerror|check-type|choose|choose-by|complement|compose|concatenate|concatenate-as|condition-format-arguments|condition-format-string|conjoin|copy-sequence|curry|default-handler|dimension|dimensions|direct-subclasses|direct-superclasses|disjoin|do|do-handlers|element|element-setter|empty\?|error|even\?|every\?|false-or|fill!|find-key|find-method|first|first-setter|floor|floor/|forward-iteration-protocol|function-arguments|function-return-values|function-specializers|gcd|generic-function-mandatory-keywords|generic-function-methods|head|head-setter|identity|initialize|instance\?|integral\?|intersection|key-sequence|key-test|last|last-setter|lcm|limited|list|logand|logbit\?|logior|lognot|logxor|make|map|map-as|map-into|max|member\?|merge-hash-codes|min|modulo|negative|negative\?|next-method|object-class|object-hash|odd\?|one-of|pair|pop|pop-last|positive\?|push|push-last|range|rank|rcurry|reduce|reduce1|remainder|remove|remove!|remove-duplicates|remove-duplicates!|remove-key!|remove-method|replace-elements!|replace-subsequence!|restart-query|return-allowed\?|return-description|return-query|reverse|reverse!|round|round/|row-major-index|second|second-setter|shallow-copy|signal|singleton|size|size-setter|slot-initialized\?|sort|sort!|sorted-applicable-methods|subsequence-position|subtype\?|table-protocol|tail|tail-setter|third|third-setter|truncate|truncate/|type-error-expected-type|type-error-value|type-for-copy|type-union|union|values|vector|zero\?)(?=$|[;,.()\s\]])]))))

(collection escape
    (zone constant.character.escape.dylan
        (match
            (regex [\\(<[0-9a-fA-F]*>|.)]))))

(collection comment-block
    (zone
        (start
            (regex [(?<=^|\s|\()/\*]))
        (end
            (regex \*/))))